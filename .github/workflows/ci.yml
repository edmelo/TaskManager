name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    # Checkout do código
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Configuração do Python
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    # Instalar dependências do projeto
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Etapa Análise Estática de Código com Bandit
    - name: Run Bandit (Static Code Analysis)
      run: |
        pip install bandit
        bandit -r todo_project -f html -o bandit-report.html

    # Publicar o relatório do Bandit
    - name: Upload Bandit Report
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit-report.html

    # Análise de Dependências com OWASP Dependency-Check
    - name: Install OWASP Dependency-Check
      run: |
        curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip -o dependency-check.zip
        unzip dependency-check.zip -d dependency-check
        chmod +x dependency-check/bin/dependency-check.sh

    - name: Run Dependency-Check
      run: |
        dependency-check/bin/dependency-check.sh --project "TaskManager" --scan . --format HTML --out dependency-check-report.html

    # Publicar o relatório do Dependency-Check
    - name: Upload Dependency-Check Report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: dependency-check-report.html

    # Executar os testes
    - name: Run tests
      run: |
        cd todo_project
        python -m unittest discover -s tests

    # Executar a aplicação
    - name: Run application
      run: |
        cd todo_project
        nohup python run.py &